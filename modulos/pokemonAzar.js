const fetch = require('node-fetch');
const { MessageMedia } = require('whatsapp-web.js');
const sharp = require('sharp');
const generaciones = {}; // Objeto para almacenar los Pok√©mon de cada generaci√≥n

const idioma = { language: 'es' }; // Idioma para la API de Pok√©dex

// Funci√≥n para precargar los Pok√©mon de todas las generaciones
const precargarGeneraciones = async () => {
    const Pokedex = (await import('pokedex-promise-v2')).default; // Importaci√≥n din√°mica
    const P = new Pokedex();

    try {
        const generacionesLista = await P.getGenerationsList(idioma);
        console.log('Precargando Pok√©mon de todas las generaciones...');

        for (const generacion of generacionesLista.results) {
            const generacionData = await P.getGenerationByName(generacion.name);
            const pokemones = generacionData.pokemon_species.map(pokemon => pokemon.name);
            generaciones[generacionData.id] = pokemones; // Almacena los Pok√©mon en el objeto `generaciones`
        }
    } catch (error) {
        console.error('Error al precargar generaciones:', error.message);
    }
};

// Llamar a la funci√≥n de precarga al iniciar
precargarGeneraciones();

// Funci√≥n para obtener un Pok√©mon aleatorio
const obtenerPokemonAleatorio = (generacion) => {
    if (generacion) {
        const pokemonDeGeneracion = generaciones[generacion];
        if (!pokemonDeGeneracion || pokemonDeGeneracion.length === 0) {
            throw new Error(`No se encontraron Pok√©mon para la generaci√≥n ${generacion}.`);
        }
        const randomIndex = Math.floor(Math.random() * pokemonDeGeneracion.length);
        return pokemonDeGeneracion[randomIndex];
    } else {
        const allPokemons = Object.values(generaciones).flat();
        if (allPokemons.length === 0) {
            throw new Error('No se encontraron Pok√©mon en ninguna generaci√≥n.');
        }
        const randomIndex = Math.floor(Math.random() * allPokemons.length);
        return allPokemons[randomIndex];
    }
};

// Funci√≥n para obtener la imagen del Pok√©mon
async function obtenerImagenPokemon(urlImage) {
    try {
        const response = await fetch(urlImage);
        if (!response.ok) throw new Error('Error al obtener la imagen del Pok√©mon');
        return await response.buffer();
    } catch (error) {
        console.error('Error al obtener la imagen:', error.message);
        throw error; // Propagar el error
    }
}

// Funci√≥n para convertir la imagen a WebP y enviarla como sticker
async function enviarStickerPokemon(client, message, pokemonData) {
    const pokemonName = pokemonData.name.charAt(0).toUpperCase() + pokemonData.name.slice(1);
    const shinyChance = Math.random(); // Genera un n√∫mero aleatorio entre 0 y 1
    const isShiny = shinyChance < 0.05; // 1 en 20 es 0.05
    const urlImage = isShiny ? pokemonData.sprites.front_shiny : pokemonData.sprites.front_default; // 1 en 20 es 0.05

    try {
        const imageBuffer = await obtenerImagenPokemon(urlImage);
        
        // Convertir la imagen a WebP
        const webpBuffer = await sharp(imageBuffer)
            .resize(512, 512) // Cambia el tama√±o si lo deseas
            .toFormat('webp')
            .toBuffer();

        // Crear un objeto MessageMedia para el sticker
        const media = new MessageMedia('image/webp', webpBuffer.toString('base64'), `${pokemonName} Sticker`);

        // Enviar el sticker
        await client.sendMessage(message.from, media, { sendMediaAsSticker: true });

        // Enviar mensaje si es shiny
        if (isShiny) {
            await client.sendMessage(message.from, '‚ú® ¬°Es un Pok√©mon shiny! ‚ú®');
        }
    } catch (error) {
        console.error('Error al enviar el sticker de Pok√©mon:', error);
        await client.sendMessage(message.from, '‚ùå Hubo un error al enviar el sticker. Intenta nuevamente.');
    }
}

// Funci√≥n principal para manejar el comando
async function sendPokemonInfo(client, message, args) {
    const generacion = args[0] ? args[0] : null; // Obtener la generaci√≥n del primer argumento (opcional)

    // Validar el par√°metro de generaci√≥n si se proporciona
    if (generacion && (isNaN(generacion) || generacion < 1 || generacion > 9)) {
        await client.sendMessage(message.from, '‚ö†Ô∏è Por favor, proporciona una generaci√≥n v√°lida (1-9).');
        return;
    }

    try {
        const pokemon = obtenerPokemonAleatorio(generacion); // Obt√©n un Pok√©mon aleatorio

        const Pokedex = (await import('pokedex-promise-v2')).default; // Importar nuevamente la clase Pokedex
        const P = new Pokedex(); // Inicializar `P`
        const pokemonData = await P.getPokemonByName(pokemon); // Obt√©n los detalles del Pok√©mon

        

        const user = message.author || message.from; // Identificar al usuario que envi√≥ el mensaje
        const userID = user.split('@')[0]; // borrar lo que est√° despu√©s del @

        const pokemonInfo = `üéâ @${userID} ¬°Un ${pokemonData.name.toUpperCase()} salvaje apareci√≥! üéâ\n` +
            `üí´ Tipo: ${pokemonData.types.map(type => type.type.name).join(', ')}\n` +
            `üìè Altura: ${pokemonData.height / 10} m\n` +
            `‚öñÔ∏è Peso: ${pokemonData.weight / 10} kg`; 

        // Enviar el mensaje de informaci√≥n
        await client.sendMessage(message.from, pokemonInfo);

        // Enviar el sticker
        await enviarStickerPokemon(client, message, pokemonData);
    } catch (error) {
        console.error('Error al obtener Pok√©mon:', error);
        await client.sendMessage(message.from, '‚ùå Hubo un error al obtener el Pok√©mon. Intenta nuevamente.');
    }
}

// Exporta la funci√≥n con la estructura adecuada
module.exports = [
    {
        name: 'pokemon',
        func: sendPokemonInfo,
        info: 'Env√≠a un Pok√©mon aleatorio y su informaci√≥n como sticker. Usa un n√∫mero (1-9) para especificar la generaci√≥n.',
        args: [{ name: 'generaci√≥n', info: 'N√∫mero de generaci√≥n (opcional)' }]
    }
];

// Iniciar la precarga
precargarGeneraciones();
